package chacha20

import (
	"bytes"
	"testing"
)

func TestValidateChaCha20Matrix(t *testing.T) {
	key := [32]byte{}
	copy(key[:], bytes.Repeat([]byte{0x1}, 32))

	nonce := [12]byte{}
	copy(nonce[:], bytes.Repeat([]byte{0x2}, 12))

	blockCount := [4]byte{}
	copy(blockCount[:], bytes.Repeat([]byte{0x3}, 4))

	foo := createChaCha20Block(key, blockCount, nonce)
	baseValue := [64]byte{0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x20, 0x33, 0x32, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x20, 0x6b, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x3, 0x3, 0x3, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2}
	if bytes.Compare(foo.internalState[:], baseValue[:]) != 0 {
		t.Error(foo, baseValue, "Should be the same")
	}
}

// This is the test specified in https://tools.ietf.org/html/rfc7539#section-2.3.2

func TestCoreFunction(t *testing.T) {
	key := [...]byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f}
	nonce := [...]byte{0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x00}
	blockCount := [4]byte{0x1}

	foo := createChaCha20Block(key, blockCount, nonce)

	expected := [...]uint32{0x61707865, 0x3320646e, 0x79622d32, 0x6b206574, 0x03020100, 0x07060504, 0x0b0a0908, 0x0f0e0d0c, 0x13121110, 0x17161514, 0x1b1a1918, 0x1f1e1d1c, 0x00000001, 0x09000000, 0x4a000000, 0x00000000}

	result := foo.AsUint32()
	if expected != result {
		t.Error("Not formulating internal state properly", result, expected)
	}
	scrambled := applyQuarterRounds(result)

	expectedState := [...]uint32{0x837778ab, 0xe238d763, 0xa67ae21e, 0x5950bb2f, 0xc4f2d0c7, 0xfc62bb2f, 0x8fa018fc, 0x3f5ec7b7, 0x335271c2, 0xf29489f3, 0xeabda8fc, 0x82e46ebd, 0xd19c12b4, 0xb04e16de, 0x9e83d0cb, 0x4e3c50a2}

	if scrambled != expectedState {
		t.Error("Scrambled not in proper state", scrambled, expectedState)
	}

	endResult := addStates(result, scrambled)

	testVector := [...]uint32{0xe4e7f110, 0x15593bd1, 0x1fdd0f50, 0xc47120a3, 0xc7f4d1c7, 0x0368c033, 0x9aaa2204, 0x4e6cd4c3, 0x466482d2, 0x09aa9f07, 0x05d7c214, 0xa2028bd9, 0xd19c12b5, 0xb94e16de, 0xe883d0cb, 0x4e3c50a2}
	if endResult != testVector {
		t.Error("End result doesn't equal test vector", endResult, testVector)
	}

	coreResult := core(key, blockCount, nonce)
	if coreResult.AsUint32() != testVector {
		t.Error("Core result doesn't equal test vector", coreResult.AsUint32(), testVector)

	}

}
